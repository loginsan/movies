API Key (v3 auth)
  51e27be0d3b2745ecf2d11a387d3398b

Example API Request
  https://api.themoviedb.org/3/movie/550?api_key=51e27be0d3b2745ecf2d11a387d3398b

API Read Access Token (v4 auth)
  eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1MWUyN2JlMGQzYjI3NDVlY2YyZDExYTM4N2QzMzk4YiIsInN1YiI6IjVmZmM4ZjJjZmFiM2ZhMDAzYzRmNGVkYyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.1qLCKZgvPot2b_yEBTGAfqnoQXsVeLfvEwt88HHh_KU


To build an image URL, you will need 3 pieces of data. The base_url, size and file_path. 
Simply combine them all and you will have a fully qualified URL. Hereâ€™s an example URL:
  https://image.tmdb.org/t/p/w500/8uO0gUM8aNqYLs1OsTBQiXu0fEv.jpg

linsykt@gmail.com 
{page: 1, results: Array(20), total_pages: 72, total_results: 1439}
IlyaLoginov B@zaFilmov

App
  Tabs*
    TabPane*
      SearchField
        Input*
      SearchResults
        Spin*
        Alert*
        MoviesList
          Row*
            Col*
              Card*
                Rate*
        Pagination

App s:search_word
  SearchField --- search_word
    Input --- search_word, handleChange, handleSubmit
  SearchResults --- s:{founded, error, isLoading, pageNum, movies}  p:search_word
    Spin
    Alert
    MoviesList --- genres
      Card --- genres, movie
    Pagination --- current_page, total_pages, search_word, handleChange


getSessionId = () => {
    const sID = localStorage.getItem('guestSessionId');
    const expiresAt = localStorage.getItem('expiresAt');
    if (sID === null || sessionExpired(expiresAt)) {
      this.mdb
        .getGuestSession()
        .then((res) => {
          if (res.success === '') {
            localStorage.setItem('guestSessionId', res.guest_session_id);
            localStorage.setItem('expiresAt', res.expires_at);
            this.sessionId = res.guest_session_id;
          }
        })
        .catch(this.handleError);
    } else {
      this.sessionId = sID;
    }
  }

error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),

componentDidMount() {
    this.handleSearch = debounce(this.handleSearchFunc, 300);
    this.mdb
      .getGenresList()
      .then((res) => res.genres)
      .then((genres) => {
        this.setState({
          genres,
        });
      })
      .catch(this.handleError);
    this.handleSearch('return');
  }

isLoading={isLoading} founded={founded} pages={totalPages}


  buildCard = (data) => {
    const movie = {
      backdropPath: data.backdrop_path,
      genres: data.genre_ids.map((elem) => <li key={`g${data.id}-${elem}`}>{this.nameGenre(elem)}</li>),
      id: data.id,
      originalLanguage: data.original_language,
      originalTitle: data.original_title,
      overview: data.overview,
      popularity: data.popularity,
      posterPath: data.poster_path,
      posterSrc: this.buildImg(data.poster_path, data.backdrop_path),
      releaseDate: isValid(new Date(data.release_date)) ? new Date(data.release_date) : new Date(),
      title: data.title,
      video: data.video,
      voteAverage: data.vote_average,
      voteCount: data.vote_count,
    };

    return <MovieCard movie={movie} key={`m${movie.id}`} />;
  };

<Col span={12} xs={24} sm={12} lg={12} xl={12} key={`m${movie.id}`}>
        <Card title="" bordered={false} className="movie">
          <img className="movie--poster" alt={movie.title} title={movie.originalTitle} src={movie.posterSrc} />
          <h5 className="movie--title" title={movie.title}>
            {movie.title}
          </h5>
          <time className="movie--release-date" dateTime={movie.releaseDate}>
            {format(movie.releaseDate, 'LLLL d, yyy')}
          </time>
          <ul className="movie--genres">{movie.genres}</ul>
          <article className="movie--overview" title={movie.overview}>
            <p>{truncate.call(movie.overview, 150)}</p>
          </article>
          <div className="movie--vote-average" title={movie.id}>
            {movie.voteAverage}
          </div>
          <div className="movie--rate">
            <Rate count="10" allowHalf defaultValue={2.5} />
          </div>
        </Card>
      </Col>

npm i date-fns prop-types
npm i --save-dev eslint
npm i --save-dev eslint-config-airbnb eslint-config-prettier eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks babel-eslint prettier
npm i --save-dev husky lint-staged
npm i --save-dev vercel

"scripts" : {
    "lint": "eslint ./src",
    "lint:fix": "eslint ./src --fix --color",
    "format": "prettier --write ./src/**/*.js"
}
"husky": {
  "hooks": {
    "pre-commit": "lint-staged"
  }
},
"lint-staged" : {
  "*.js": [
    "npm run lint:fix"
  ]
},

.prettierrc
{
  "singleQuote": true,
  "trailingComma": "es5",
  "endOfLine": "lf",
  "printWidth": 120
}

.eslintrc.json
{
  "extends": [
    "airbnb",
    "airbnb/hooks",
    "eslint-config-prettier",
    "prettier/react"
  ],
  "plugins": ["react"],
  "parser": "babel-eslint",
  "env": {
    "browser": true,
    "jest": true
  },
  "rules": {
    "curly": ["error"],
    "max-depth": ["warn", 4],
    "id-length": ["warn", { "exceptions": ["i", "j"], "min": 2 }],
    "no-lonely-if": ["error"],
    "no-plusplus": ["error", {"allowForLoopAfterthoughts": true}],
    "no-restricted-syntax": "off",
    "class-methods-use-this": "off",
    "jsx-a11y/href-no-hash": ["off"],
    "jsx-a11y/anchor-is-valid": ["off"],
    "jsx-a11y/label-has-associated-control": [ "error", {
      "assert": "either"
    }],
    "react/state-in-constructor": ["off"],
    "react/jsx-props-no-spreading": ["off"],
    "react/static-property-placement": "off"
  },
  "settings": {
    "react": {
      "pragma": "React",
      "version": "detect"
    }
  }
}